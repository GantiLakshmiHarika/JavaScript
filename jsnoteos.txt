->  Basic theory of java script :
Inventor: Brendan Eich (1995) at Netscape.
Type: Interpreted, High-level, Lightweight scripting language.
Engine:V8 (Google Chrome) â†’ compiles JS to machine code.
Other engines: SpiderMonkey (Firefox), Chakra (Edge), JavaScriptCore (Safari).
Standardization: ECMAScript (by ECMA International).
Popular Name: JS (JavaScript).
Initial Names:Mocha â†’ LiveScript â†’ JavaScript.
Execution: Runs inside browser + also outside (Node.js).
Features:Just-In-Time (JIT) compilation.

 TIP 1: 
To get emojis in the output : press windows button and ; button we get emojis click on emoji u need.
windows+; = emoji hey done macha i got.

-> understanding about console.log() why we use it ?
console.log-printing stmt in js console global object , log method .

in js every thing is  a object 
99% objects  1% primitives
whom Asking - object
what asking - method
quantity- aruguments
console is one of the object in js 
alert is a global object 

Tip : shift+enter to move to new line in the console .
alert method is used provide a pop up notification

Datatypes in js:
1. Primitive data types  
 Primitive data are the most basic data types. They store single values and are immutable (cannot be changed).
number â†’ Represents numeric values (e.g., 10, 3.14).
string â†’ Represents textual data (e.g., "hello", 'world').
boolean â†’ Represents logical values (true or false).
null â†’ Represents an intentional absence of value.
undefined â†’ Represents a variable that has been declared but not assigned a value.
bigint â†’ Used to represent large integers beyond the range of number.
symbol â†’ Represents a unique and immutable identifier.

2. Non-Primitive Data Types

Non-primitive data types are complex types. They can hold multiple values and are mutable.
object â†’ Used to store collections of data in key-value pairs.
(e.g., { name: "John", age: 25 })

Any thing that enclosed with in single quatation,double quation or backtrick is consider as string 
" my name is harika"  yes
"185" yes even though it is a number it is enclosed with in the double quatation it is consider as string in java script.

Tip : console.log( "iam\n learning\n from youtube\n javascript");
      console.log( `iam learning from youtube javascript`);
     \n for new line and also ` operator is used for newline in js 
     ctrl z- undo
     ctrl c -copy
     ctrl v - paste
     ctrl x- delete
     ctrl a - select all
     shift+alt - copying work as ctrl c
     ctrl+shift+i=opening of console  in browser

-> List of Common Escape Sequences
Code                	Description

\b	                    Backspace (moves cursor one step back)
\f	                    Form feed (new page, rarely used today)
\n	                    New line (moves cursor to the next line)
\t	                    Horizontal tab (adds a tab space)
\v                   	Vertical tab (rarely used)
\r	                    Carriage return (moves cursor to the beginning of the line)
\\	                    Backslash (\) itself
\' \" \	                Quotes (used to include ', ", or ` inside strings)

-> Variables keywords and identifiers 
How do we create a variable?
In JavaScript, variables are containers used to store data. To create a variable, we use keywords like let, var, or const.
Keywords (Reserved Words)

Keywords are special reserved words in JavaScript that have predefined meanings.
They cannot be used as identifiers (variable or function names).

let â†’ Used to declare block-scoped variables.
var â†’ Used to declare function-scoped variables (old way).
const â†’ Used to declare constants (values cannot be reassigned).
function â†’ Used to declare functions.
class â†’ Used to define classes.
if, else, switch â†’ Used for decision-making.

example of let : 
let ramuamount = 2000;
let somuamount = 3000;
let totalamount = ramuamount + somuamount;
console.log(`ramu's amount`,ramuamount);
console.log(`somu's amount`,somuamount);
console.log(`totalamount`,totalamount);
output :ramu's amount 2000
somu's amount 3000
totalamount 5000

identifiers names can be used as reserved words /keywords
variables are used to store the values .

comaparsion of var ,let, const :

const :value cannot be reaasigned any value when we use const
  ramumount=5000
if we use  as const ramuamount = 5000 cannot be change the value 5000 forever if we use const  

var : redeclare of a variable 
example : var marks =80; 
          var marks = 40;

let : cannot redeclare the variable
example : let marks =80; 
          let marks = 40; // no we cannot done like this  

statement: stmt is a instruction which is executed by the js .
js uses automatic  ASI(Automatic semi colon insertion ) 

Expressions and literals :
expression is a piece of code which produces a value when evaluated .
Expression :
total amount = let totalamount = ramuamount + somuamount;
returns value when executed so expression  

literals is a fixed value written directlyin a word eg string number arrays object 
example : literals
let ramuamount = 2000;
let somuamount = 3000;
every literal is an expression.
${};
Single threaded programming language js ?
js can execute only one instruction at a time hence it is called as single threaded. oka pani leda oka instruction complete chesakane inko instruction cheyagaladhu javascript ade instructions skip cheyaledu andhuku js aneydi single threaded programming language.


Synchronous programming = tasks run sequentially (one after another).
Each operation must finish before the next one starts.
The program waits (is blocked) until the current task is completed
Synchronous != single thread 
Synchronous executes sequantially 
single thread executes one after another with out any sequence.

Synchronous  vs  Asynchronous 
ðŸ”¹ Aspect	                      ðŸ•’ Synchronous                    	                  âš¡ Asynchronous
Execution	               Tasks run one after another (sequential)	               Tasks can run independently / in background
Blocking	               Program is blocked until the task finishes	             Program is not blocked, continues with other tasks
Onion dosa story	       Wait for dosa to cook before dropping chelli at school	   Start dosa cooking â†’ meanwhile drop chelli â†’ dosa finishes later.

Comments :  we can write comments using 
// single line comment 
/* multiline comment
comments are  also used for debubbing
TIP: ctrl+/ -single line comment
     shift+alt+a - multiline comment.

Brief explanation of Datatypes in js:
typeof():shows which type of datatype we are using.

OOPS :
object is a entity which has state and behvaiour.
state = variables 
behaviour = functions
class is a blue print of the object 
if we use static variable in class we need to acess with the class name 
example : class Book {
    static author="natural star";
    constructor(title, price, cost, author) {
        this.title = title;
        this.price = price;
        this.cost = cost;
    }
}

let javascript = new Book("JavaScript Latest Edition", 400, 198, "Natural Star ");
let python = new Book("python Latest Edition", 200, 195, "Natural Star ");
let cprogramming =new Book("c programming latest edition",350,128,"natural star ");
let java = new Book(" java latest edition",321,89,"natural star ");
console.log(javascript.title);
console.log(python.cost);
// acessing the static variable withi the class name 
console.log(Book.author);
console.log(java.price);

converting string to number 

let harika = "40"; 
console.log(Number(harika)); // we can convert like this also 
console.log(+harika); // also can convert like this also
let king = 3n;
console.log(typeof(king)); // we can also represnts with n.

// Boolean
let bookisgood=true;
console.log(typeof bookisgood);  // output boolean 
// Boolean
let bookisgood=true;
console.log(typeof bookisgood);  // output boolean 
if(bookisgood)
{
    console.log(true);
}
else{
    console.log(false);
}

// string :
string is a collection of 0 or more characters

//strings
/* let good=string("harika"); // built in type method usage
let goods="harika"; // direct usage
console.log(typeof (good)); 
let good = new String("harika"); // object uasage bye new keyword
console.log(typeof (good));
// null it specifes the variables has nothing in it 
let dabba=null;
console.log(typeof dabba); // typeof null is object

// when we are using let var  we can change the datatype inside the variable 
example : 
let number=10;
console.log(number);
let number="hi this is me";
console.log(number);
// but by using the const we can change the dataytype 
hence js is a dynamic programming language 

asi- automatic semicolon insertion.
window-global object 

prompt : it is a method in windows global object 
let username = prompt("what is your name?");
console.log(username);
console.log(`welcome to this website ${username}`);
let height = prompt("enter your height?");
console.log(height);
let weight = prompt("enter your weight?");
console.log(weight);
let BMI = weight/ ( height ** 2);
console.log(BMI);

Type conversions :

Converstion of  one type to another type
implict type converstion : automatically convert by the js engine.
explict type convertion : manually done by us 
 example :
let marks = 100;
let firstName = "Suresh";
let cash = "1000";
let emptyString = "";
let isPassed = true;
let result;
let myValue = null;
let bigValue = 500n;
let s1 = Symbol("id");

console.log("marks:", marks, typeof(marks));
console.log("firstName:", firstName, typeof(firstName));
console.log("cash:", cash, typeof(cash));
console.log("emptyString:", emptyString, typeof(emptyString));
console.log("isPassed:", isPassed, typeof(isPassed));
console.log("result:", result, typeof(result));
console.log("myValue:", myValue, typeof(myValue));
console.log("bigValue:", bigValue, typeof(bigValue));
console.log("symbol:", s1, typeof(s1));


let markstr = String(marks);
let firstnames = Number(firstName);
let cashs = String(cash);
let emptyStrings = Number(emptyString);
let isPasses = String(isPassed);
let results = String(result);
let myValues = String(myValue);
let bigValu = String(bigValue);
let s = String(s1);


console.log("markstr:", markstr, typeof(markstr));
console.log("firstnames:", firstnames, typeof(firstnames));
console.log("cashs:", cashs, typeof(cashs));
console.log("emptyStrings:", emptyStrings, typeof(emptyStrings));
console.log("isPasses:", isPasses, typeof(isPasses));
console.log("results:", results, typeof(results));
console.log("myValues:", myValues, typeof(myValues));
console.log("bigValu:", bigValu, typeof(bigValu));
console.log("symbol:", s, typeof(s));

Number converstion Spaces : 2 types 
1. leading spaces 
2. Trailing spaces
ex: console.log("   143    ") - leading spaces 
 console.log("1  4  3")- Trailing spaces
 js automatically removes these spaces in js and prints the output.

Boolean Convertion : it treats spaces as a value .
 Values that are intuitively empty become false.
Non-empty string is always true in JavaScript Boolean conversion.
example : console.log(Boolean(1));     // true
console.log(Boolean(0));     // false
console.log(Boolean("1"));   // true
console.log(Boolean("0"));   // true
console.log(Boolean(" "));   // true (string with space)
console.log(Boolean("   ")); // true (string with multiple spaces)
console.log(Boolean(""));    // false (empty string)

Operators : 
arthmatic operator example:
let num1= 9;
let num2=19;
console.log("addition:",num1+num2);
console.log("substraction:",num1-num2);
console.log("multiplication:",num1*num2);
console.log("division:",num1/num2);
console.log("remainder:",num1%num2);
console.log("exponent:",num1**num2);
console.log("squareroot:",(num1+num2)**(1/2));
console.log("squareroot:",Math.sqrt(num1+num2));
console.log("cuberoot:",Math.cbrt(num1+num2)); 

Assignment operator :
example:
let value =100;
console.log("Initial value:", value);
value+=5;
console.log(value);
value-=19;
console.log(value);
value*=12;
console.log(value);
value**=23;
console.log(value);
value%=12;
console.log(value);
value/=9;
console.log(value);

Comparison operator: it is used to check the condition so it always return boolean as output 
let a = 10;
let b = 5;
console.log(a > b);   
console.log(a < b);   
console.log(a == 10); 
console.log(a === '10'); 
console.log(a != b);  
console.log(a !== 10);

Logical Operators :
let a=4;
let b=5;
console.log(a&&b);// both are same returns 1 else 0
console.log(a||b);// any one is 1 it shows 1 else 0
console.log(a!=b);// reverse the  output value 

Bitwise operators :
->Bitwise AND : 
Compares each bit of two numbers.
Returns 1 if both bits are 1, else 0.
->Bitwise OR  :
Compares each bit of two numbers.
Returns 1 if at least one bit is 1, else 0.
->Bitwise XOR 
Returns 1 if bits are different, else 0.
->Bitwise NOT 
flips 1 to 0 and 0 to 1.
example : 
let a = 4;
let b = 5; 
console.log(a & b); //4
console.log(a | b); //5
console.log(a ^ b); //1
console.log(~a);    //-5
console.log(~b);     //-6

Ternary operator :
tip : condition ? valueIfTrue : valueIfFalse
let age=2;
let result = (age<5)?"toodler":"Child";
console.log(result); //output based on condition 

TIP :
let  a="10";
let b=30;
console.log(a*b);

 let  a=10;
 let b=30;
 console.log(a*b);
 bonus tip :JavaScript automatically converts the string "10" to the number 10.

complete example :
let a="34";
let b="4";
console.log(a+b);
console.log(a-b);
console.log(a*b);
console.log(a%b);
console.log(a/b);
console.log(a&&b);
console.log(a>>b);
console.log(a<<b);
console.log(a!=b);
console.log(a||b);
console.log(~a);
console.log(~b);